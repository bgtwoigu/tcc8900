/*
 * File:        include/linux/tcc_ioctl.h
 *
 * Created:     June 10, 2008
 * Copyright (C) 2008-2009 Telechips <linux@telechips.com>
 * Description: header file of driver/char/tcc_ioctl.c
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see the file COPYING, or write
 * to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#ifndef __TCC_IOCTL_H__
#define __TCC_IOCTL_H__

//#include "globals.h"
#include "ioctl_ckcstr.h"


/***************************************CLOCK****************************************************/
	enum
	{
		IDLE_PRIORITY = 0, // Don't Return IDLE_PRIORITY
		LOW_PRIORITY,
		MID_PRIORITY,
		HIGH_PRIORITY,
		MAX_PRIORITY,
	
		CLOCK_PRIORITY_NUM,
	//}stCKC_PRIORITY;
	};

//CKC Enum
	enum{ /* CLKCTRL Clock Source */
		DIRECTPLL0=0,
		DIRECTPLL1,
		DIRECTPLL2,
		DIRECTPLL3,
		DIRECTXIN,
		DIVIDPLL0,
		DIVIDPLL1,
		DIRECTXTIN,
	};
	
	enum{ /* Peri. Clock Source */
		PCDIRECTPLL0=0,
		PCDIRECTPLL1,
		PCDIRECTPLL2,
		PCDIRECTPLL3,
		PCDIRECTXIN,
		PCDIVIDPLL0,
		PCDIVIDPLL1,
		PCDIVIDPLL2,
		PCDIVIDPLL3,
		PCDIRECTXTIN,
		PCEXITERNAL, // 10
		PCDIVIDXIN_HDMITMDS,
		PCDIVIDXTIN_HDMIPCLK,
		PCHDMI, 	// 27Mhz
		PCSATA, 	// 25Mhz
		PCUSBPHY,	// 48Mhz
	};
	
	enum{ /* Peri. Clock Source */
		PDCO = 0,
		PDIVIDER,
	};
	
	enum {/* Peri. Name */
		PERI_TCX = 0, 
		PERI_TCT, 
		PERI_TCZ, 
		PERI_LCD0,	
		PERI_LCD1,	
		PERI_LCDSI, 
		PERI_CIFMC,  
		PERI_CIFSC, 
		PERI_OUT0, 
		PERI_OUT1, 
		PERI_HDMI, 
		PERI_USB11H, 
		PERI_SDMMC0, 
		PERI_MSTICK,  
		PERI_I2C, 
		PERI_UART0,  
		PERI_UART1,  
		PERI_UART2,  
		PERI_UART3,  
		PERI_UART4,  
		PERI_UART5,  
		PERI_GPSB0, 
		PERI_GPSB1, 
		PERI_GPSB2, 
		PERI_GPSB3, 
		PERI_GPSB4, 
		PERI_GPSB5, 
		PERI_ADC,  
		PERI_SPDIF,  
		PERI_EHI0, 
		PERI_EHI1, 
		PERI_AUD,  
		PERI_CAN,  
		PERI_Reserved0, 
		PERI_SDMMC1, 
		PERI_Reserved1, 
		PERI_DAI,  
	};
	
	enum{/*for PWROFF Register*/
		PMU_VIDEODAC = 0,
		PMU_HDMIPHY,
		PMU_LVDSPHY,
		PMU_USBNANOPHY,
		PMU_SATAPHY,
		PMU_MEMORYBUS,
		PMU_VIDEOBUS,
		PMU_DDIBUS,
		PMU_GRAPHICBUS,
		PMU_IOBUS,
	};
	
	enum{/* for SWRESET */
		RESET_CPU = 0,
		RESET_DDIBUS,
		RESET_MEMBUS,
		RESET_GRAPBUS,
		RESET_IOBUS,
		RESET_VIDEOBUS,
		RESET_VIDEOCORE,
		RESET_SMU,
	};

	enum {/* clock divider (div+1) */
		CLKDIV0 = 0,
		CLKDIV2 ,
		CLKDIV3 ,
		CLKDIV4 ,
		CLKDIVNONCHANGE,
	};
	
	enum {
		CLKCTRL0 = 0,	//FCORE_CPU
		CLKCTRL1,		//FBUS_DDI
		CLKCTRL2,		//FMEM_BUS
		CLKCTRL3,		//FBUS_GRP
		CLKCTRL4,		//FBUS_IOB
		CLKCTRL5,		//FBUS_VBUS
		CLKCTRL6,		//FBUS_VCODEC
		CLKCTRL7,		//FBUS_SMU
	};


	typedef enum {
		FCORE_CPU = 0,
		FBUS_GRP,
		FBUS_VBUS,
		FBUS_VCODEC,
		FBUS_DDI,
		FBUS_SMU,
		FBUS_IOB,
		FMEM_BUS,
	};

	
	enum {
		NORMAL_MD = 0,
		DYNAMIC_MD,
	};
	
	enum {
		RB_USB11H	= 0,
		RB_USB20OTG, 
		RB_IDECONTROLLER, 
		RB_DMACONTROLLER , 
		RB_SDMMCCONTROLLER ,
		RB_SATAHCONTROLLER , 
		RB_MEMORYSTICKCONTROLLER , 
		RB_I2CCONTROLLER ,
		RB_NFCCONTROLLER ,
		RB_EXTHCONTROLLER0 , 
		RB_EXTHCONTROLLER1 ,
		RB_UARTCONTROLLER0 ,
		RB_UARTCONTROLLER1 ,
		RB_UARTCONTROLLER2 ,
		RB_UARTCONTROLLER3 ,
		RB_UARTCONTROLLER4 ,
		RB_UARTCONTROLLER5 ,
		RB_GPSBCONTROLLER0 ,
		RB_GPSBCONTROLLER1 ,
		RB_GPSBCONTROLLER2 ,
		RB_GPSBCONTROLLER3 ,
		RB_GPSBCONTROLLER4 ,
		RB_GPSBCONTROLLER5 ,
		RB_DAICDIFCONTROLLER ,
		RB_ECCCONTROLLER ,
		RB_SPDIFTXCONTROLLER,
		RB_RTCCONTROLLER ,
		RB_TSADCCONTROLLER,
		RB_GPSCONTROLLER ,
		RB_RESERVEDCONTROLLER, 
		RB_CANCONTROLLER,
		RB_ADMACONTROLLER,	// 31
	
		RB_MPE_FECCONTROLLER, 
		RB_TSIFCONTROLLER,
		RB_SRAMCONTROLLER,
		
		RB_ALLPERIPERALS,
	
	};
	
	enum{ /* Fmbus Step */
		FMBUS_141Mhz=0,
		FMBUS_145Mhz,
		FMBUS_150Mhz,
		FMBUS_160Mhz,
		FMBUS_170Mhz,
		FMBUS_180Mhz,
		FMBUS_190Mhz,
		FMBUS_200Mhz,
		FMBUS_210Mhz,
		FMBUS_220Mhz,
		FMBUS_230Mhz,
		FMBUS_240Mhz,
		FMBUS_250Mhz,
		FMBUS_260Mhz,
		FMBUS_270Mhz,
		FMBUS_280Mhz,
		FMBUS_290Mhz,
		FMBUS_300Mhz,
		FMBUS_312Mhz,
		FMBUS_320Mhz,
		FMBUS_330Mhz,
	
		FMBUS_STEPMAX,
	};



	enum{ /* ddi Power Down Field  */
		DDIPWDN_CIF = 0,
		DDIPWDN_VIQE,
		DDIPWDN_LCDC0,
		DDIPWDN_LCDC1,
		DDIPWDN_LCDSI,
		DDIPWDN_MSCL0,
		DDIPWDN_MSCL1,
		DDIPWDN_DDIC,
		DDIPWDN_HDMI,
		DDIPWDN_STEPMAX,
		};

	enum{ /* ETC Power Down Field  */
		ETC_USBPHYOFF = 0,
		ETC_USBPHYON,
		ETC_3DGPUOFF, 
		ETC_3DGPUON, 
		ETC_OVERLAYMIXEROFF, 
		ETC_OVERLAYMIXERON ,

		ETC_STEPMAX,

		};


				enum{ /* Video BUS CFG Power Down Field  */
		VIDEOBUSCFG_PWDNJPEGENC = 0,
		VIDEOBUSCFG_PWDNJPEGDEC,
		VIDEOBUSCFG_PWDNVIDEOCODEC, 
		VIDEOBUSCFG_PWDNVIDEOCACHE, 
		
		VIDEOBUSCFG_PWDNSTEPMAX,
		
		};
		enum{ /* Video BUS CFG Power Down Field  */
		VIDEOBUSCFG_SWRESETJPEGENC = 0,
		VIDEOBUSCFG_SWRESETJPEGDEC,
		VIDEOBUSCFG_SWRESETVIDEOCODEC, 
		VIDEOBUSCFG_SWRESETVIDEOCACHE, 
		
		VIDEOBUSCFG_SWRESETSTEPMAX,

	};
	
typedef enum{
	CORE_CKC_6000000 = 0,
	CORE_CKC_5062500,
	CORE_CKC_4860000,
	CORE_CKC_4725000,
	CORE_CKC_4556250,
	CORE_CKC_4387500,
	CORE_CKC_4252500,
	CORE_CKC_4050000,
	CORE_CKC_3948750,
	CORE_CKC_3780000,
	CORE_CKC_3712500,
	CORE_CKC_3645000,
	CORE_CKC_3510000,
	CORE_CKC_3375000,
	CORE_CKC_3240000,
	CORE_CKC_3037500,
	CORE_CKC_2970000,
	CORE_CKC_2835000,
	CORE_CKC_2700000,
	CORE_CKC_2632500,
	CORE_CKC_2430000,
	CORE_CKC_2362500,
	CORE_CKC_2227500,
	CORE_CKC_2160000,
	CORE_CKC_2025000,
	CORE_CKC_1890000,
	CORE_CKC_1822500,
	CORE_CKC_1750000,
	CORE_CKC_1687500,
	CORE_CKC_1620000,
	CORE_CKC_1518750,
	CORE_CKC_1485000,
	CORE_CKC_1417500,
	CORE_CKC_1350000,
	CORE_CKC_1215000,
	CORE_CKC_1125000,
	CORE_CKC_1080000,
	CORE_CKC_1012500,
	CORE_CKC_960000,
	CORE_CKC_945000,
	CORE_CKC_907500,
	CORE_CKC_883750,
	CORE_CKC_840000,
	CORE_CKC_810000,
	CORE_CKC_787500,
	CORE_CKC_757500,
	CORE_CKC_730000,
	CORE_CKC_712500,
	CORE_CKC_660000,
	CORE_CKC_631250,
	CORE_CKC_607500,
	CORE_CKC_577500,
	CORE_CKC_540000,
	CORE_CKC_495000,
	CORE_CKC_450000,
	CORE_CKC_405000,
	CORE_CKC_378750,
	CORE_CKC_360000,
	CORE_CKC_330000,
	CORE_CKC_270000
};

#ifdef TCC_DDR2_TYPE
typedef enum{
	BUS_CKC_3300000 = 0, 
	BUS_CKC_3200000,
	BUS_CKC_3120000,
	BUS_CKC_3000000,
	BUS_CKC_2900000,
	BUS_CKC_2800000,
	BUS_CKC_2700000,
	BUS_CKC_2600000,
	BUS_CKC_2500000,
	BUS_CKC_2400000,
	BUS_CKC_2300000, 
	BUS_CKC_2200000,
	BUS_CKC_2100000,
	BUS_CKC_2000000,
	BUS_CKC_1900000,
	BUS_CKC_1800000,
	BUS_CKC_1700000,
	BUS_CKC_1600000,
	BUS_CKC_1500000,
	BUS_CKC_1450000,
	BUS_CKC_1410000
};

#else
typedef enum{
	BUS_CKC_1600000 = 0,
	BUS_CKC_1560000,
	BUS_CKC_1500000,
	BUS_CKC_1450000,
	BUS_CKC_1400000,
	BUS_CKC_1350000,
	BUS_CKC_1300000, 
	BUS_CKC_1250000,
	BUS_CKC_1200000,
	BUS_CKC_1150000,
	BUS_CKC_1100000,
	BUS_CKC_1050000,
	BUS_CKC_1000000,
	BUS_CKC_950000, 
	BUS_CKC_900000,
	BUS_CKC_850000,
	BUS_CKC_800000,
	BUS_CKC_750000,
	BUS_CKC_705000,
	BUS_CKC_650000,
	BUS_CKC_600000, 
	BUS_CKC_550000,
	BUS_CKC_500000,
	BUS_CKC_450000,
	BUS_CKC_400000,
	BUS_CKC_352500,
	BUS_CKC_305000,
	BUS_CKC_250000
};
#endif


typedef enum{
	FBUS_NULL = 0,
	FBUS_CKC_2640000,
	FBUS_CKC_2340000,
	FBUS_CKC_1760000,
	FBUS_CKC_1560000,
	FBUS_CKC_1320000,
	FBUS_CKC_1170000,
	FBUS_CKC_1056000,
	FBUS_CKC_936000,
	FBUS_CKC_880000, 
	FBUS_CKC_780000,
	FBUS_CKC_754285,
	FBUS_CKC_668571,
	FBUS_CKC_660000,
	FBUS_CKC_586666,
	FBUS_CKC_585000,
	FBUS_CKC_528000,
	FBUS_CKC_520000,
	FBUS_CKC_480000, 
	FBUS_CKC_468000,
	FBUS_CKC_440000,
	FBUS_CKC_425454,
	FBUS_CKC_406153,
	FBUS_CKC_390000,
	FBUS_CKC_377142,
	FBUS_CKC_360000,
	FBUS_CKC_352000,
	FBUS_CKC_334285,
	FBUS_CKC_330000,
	FBUS_CKC_312000,
	FBUS_CKC_292500,
	FBUS_CKC_60000,
	FBUS_CKC_30000,
	FBUS_CKC_10000,
	FBUS_CKC_0,
};

#define	ETCMASK_USBPHYOFF  0x00000001
#define ETCMASK_USBPHYON    0x00000002
#define	ETCMASK_3DGPUOFF  		0x00000004
#define   ETCMASK_3DGPUON    		0x00000008
#define	ETCMASK_OVERLAYMIXEROFF  0x00000010
#define   ETCMASK_OVERLAYMIXERON    0x00000020


#define MAJOR_NUM 247

#if 0
#define IOCTL_CKC_SET_PERI          _IO(MAJOR_NUM, 0)
#define IOCTL_CKC_GET_PERI          _IO(MAJOR_NUM, 1)
#define IOCTL_CKC_SET_PERIBUS       _IO(MAJOR_NUM, 2)
#define IOCTL_CKC_GET_PERIBUS       _IO(MAJOR_NUM, 3)
#define IOCTL_CKC_SET_PERISWRESET   _IO(MAJOR_NUM, 4)
#define IOCTL_CKC_SET_FBUSSWRESET   _IO(MAJOR_NUM, 5)
#define IOCTL_CKC_SET_CPU           _IO(MAJOR_NUM, 6) 
#define IOCTL_CKC_GET_CPU           _IO(MAJOR_NUM, 7) 
#define IOCTL_CKC_SET_SMUI2C        _IO(MAJOR_NUM, 8) 
#define IOCTL_CKC_GET_BUS           _IO(MAJOR_NUM, 9) 
#define IOCTL_CKC_GET_VALIDPLLINFO  _IO(MAJOR_NUM, 10)
#define IOCTL_CKC_SET_FBUS          _IO(MAJOR_NUM, 11)
#define IOCTL_CKC_GET_FBUS          _IO(MAJOR_NUM, 12)
#define IOCTL_CKC_SET_PMUPOWER      _IO(MAJOR_NUM, 13)
#define IOCTL_CKC_GET_PMUPOWER      _IO(MAJOR_NUM, 14)
#define IOCTL_CKC_GET_CLOCKINFO     _IO(MAJOR_NUM, 15)
#define IOCTL_CKC_SET_CHANGEFBUS    _IO(MAJOR_NUM, 16)
#define IOCTL_CKC_SET_CHANGEMEM     _IO(MAJOR_NUM, 17)
#define IOCTL_CKC_SET_CHANGECPU     _IO(MAJOR_NUM, 18)
#else
#define IOCTL_CKC_SET_PERI          _IO(MAJOR_NUM, 0)
#define IOCTL_CKC_GET_PERI          _IO(MAJOR_NUM, 1)
#define IOCTL_CKC_SET_PERIBUS       _IO(MAJOR_NUM, 2)
#define IOCTL_CKC_GET_PERIBUS       _IO(MAJOR_NUM, 3)
#define IOCTL_CKC_SET_PERISWRESET   _IO(MAJOR_NUM, 4)
#define IOCTL_CKC_SET_CPU           _IO(MAJOR_NUM, 5) 
#define IOCTL_CKC_SET_SMUI2C        _IO(MAJOR_NUM, 6) 
#define IOCTL_CKC_GET_CPU           _IO(MAJOR_NUM, 7) 
#define IOCTL_CKC_GET_BUS           _IO(MAJOR_NUM, 8) 

#define IOCTL_CKC_GET_VALIDPLLINFO  _IO(MAJOR_NUM, 9)
#define IOCTL_CKC_GET_CLOCKINFO     _IO(MAJOR_NUM, 10)

#define IOCTL_CKC_SET_FBUS          _IO(MAJOR_NUM, 11)
#define IOCTL_CKC_GET_FBUS          _IO(MAJOR_NUM, 12)
#define IOCTL_CKC_SET_PMUPOWER      _IO(MAJOR_NUM, 13)
#define IOCTL_CKC_GET_PMUPOWER      _IO(MAJOR_NUM, 14)

#define IOCTL_CKC_SET_CHANGECPU     _IO(MAJOR_NUM, 15)
#define IOCTL_CKC_SET_CHANGEMEM     _IO(MAJOR_NUM, 16)
#define IOCTL_CKC_SET_CHANGEFBUS    _IO(MAJOR_NUM, 17)

#define IOCTL_CKC_SET_FBUSSWRESET   _IO(MAJOR_NUM, 18)

#define IOCTL_CKC_SET_DDIPWDN       _IO(MAJOR_NUM, 19)
#define IOCTL_CKC_GET_DDIPWDN       _IO(MAJOR_NUM, 20)

#define IOCTL_CKC_SET_ETCBLOCK      _IO(MAJOR_NUM, 21)

#define IOCTL_BLK_SETPOWER          _IO(MAJOR_NUM, 22)
#define IOCTL_BLK_GETPOWER          _IO(MAJOR_NUM, 23)

#define IOCTL_CKC_SET_VIDEOCFGPWDN  _IO(MAJOR_NUM, 24)
#define IOCTL_CKC_GET_VIDEOCFGPWDN  _IO(MAJOR_NUM, 25)
#define IOCTL_CKC_SET_VIDEOCFGSWRESET   _IO(MAJOR_NUM, 26)

#define IOCTL_GET_REMOCON_KEY   _IO(MAJOR_NUM, 27)

struct ckc_ioctl{
	stckcioctl  in_ckc;
	stckcinfo   out_ckc;
};


#endif

extern int get_cpu_ckc(int val);
extern int get_mem_ckc(int val);
extern int get_fbus_ckc(int val);
extern void fbus_ckc_set(char *fbus, char mode);
extern void bus_ckc_set(char bus);
extern void cpu_ckc_set(char cpu);
extern void ddi_ckc_set(char ddi, int mode);
extern void peri_ckc_off(char peri);
extern void peri_ckc_on(char peri);
extern void etc_ckc_off(char peri);
extern void etc_ckc_on(char etc);
extern void set_ckc_vpu_start();
extern void set_ckc_vpu_end();


#endif	/* __TCC_IOCTL_H__ */
